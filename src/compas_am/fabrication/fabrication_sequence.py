import os, json
import logging
logger = logging.getLogger('logger')

class Fabrication_sequence:
    """
    Creates all the commands in order for fabrication
    
    Attributes
    ----------
    sorted_paths_collection : list
        compas_am.slicing.printpath.PathCollection or any class inheriting from it
    machine_model : The hardware 
        compas_am.machine_model.MachineModel or any class inheriting form it
    type : str
        "fdm", "robotic_fdm"
    """

    def __init__(self, paths_collection, machine_model, fabrication_type):
        self.paths_collection = paths_collection
        self.machine_model = machine_model
        self.type = fabrication_type

        self.visualization_geometry = None

        self.ordered_print_points = self.get_print_points_ordered_in_fabrication_sequence()
        self.commands = []

        if self.type == "robotic_fdm":
            self.commands = self.generate_robotic_fdm_commands()
        elif self.type == "fdm":
            self.commands = self.generate_fdm_commands()
        else: 
            raise NameError("Invalid fabrication type : "+ str(fabrication_type))


    def get_print_points_ordered_in_fabrication_sequence(self):
        pass

    def generate_robotic_fdm_commands(self):
        pass

    def generate_fdm_commands(self):
        pass

    def generate_visualization_geometry(self):
        pass

    def save_commands_to_gcode(self, FILE, extruder_temp, bed_temp, print_speed):
        """Creates all the commands in order for fabrication

        Attributes
        ----------
        FILE : str
            Path of gcode file to be saved.
        extruder_temp : int
            Extrusion temperature (degr C).
        bed_temp : int
            Heated bed temperature (degr C).
        print_speed : int
            Movement speed (mm/s).
        

       GCODE COMMANDS (for reference)

        G28                     - Home all axes
        G29                     - Bed Leveling (Automatic)
        G28 X Y                 - Home X and Y axes
        G90                     - Set Absolute Positioning (movement)
        M82                     - Set Absolute Extrusion mode (extrusion)
        G1 X0 Y0 F2400          - Linear Movement, move to X = 0, Y = 0 with a speed of 2400 mm/min
        G1 X20 Y20 E10 F1200    - Linear Movement, move to X = 20, Y = 20 with a speed of 1200 mm/min while pushing 10mm of filament (E)
        G92 E0                  - Set current filament position to E=0. Can also be used for X, Y, Z axes
        M104 S190 T0            - Start heating T0 to 190 degrees celcius
        M109 S190 T0            - Wait until T0 is 190 degrees before continuing commands
        M116                    -
        M140 S50                - Heat the bed to 50 degrees celcius
        M190                    - Wait until the bed is 50 degrees before continuing
        M106 255                - Set Fan Speed (255 = fully on, 0 = off)
        M73 P25                 - Set current print progress for LCD screen to 25%
        
        """
        # convert print_speed mm/s to mm/min
        print_speed = print_speed*60

        # TODO: Add calculation for filament_feed_length
        filament_feed_length = 0

        with open(FILE, "w") as f:
            f.write("; Generated by compas_am vX.X\n")
            f.write("; LAYER HEIGHT: \n")

            f.write("M201 X1000 Y1000 Z1000 E5000 ; sets max acceleration mm/sec^2\n")
            f.write("M203 X200 Y200 Z12 E120 ; sets max feedrates, mm/sec\n")
            
            f.write("M83; extruder relative mode\n")

            f.write("M104 S{0} ; set extruder temperature\n".format(extruder_temp)) #extruder_temperature
            f.write("M140 S{0} ; set bed temperature\n".format(bed_temp)) #bed_temperature
            f.write("M190 S{0} ; wait for bed temperature\n".format(bed_temp)) #bed_temperature

            f.write("G28 ; home all axes without mesh bed level\n")
            f.write("G80 ; mesh bed leveling\n")

            f.write("G1 Y-3.0 F1000.0 ; go outside print area\n")
            f.write("G92 E0 ; set filament pos to 0\n")
            f.write("G1 X60.0 E9.0 F1000 ; intro line\n")
            f.write("M73 P0 R{0} ; set progress to 0 and time remaining to total time\n".format(000)) # 000 to be replaced by remaining time
            f.write("M73 Q0 R{0} ; set progress to 0 and time remaining to total time for quiet mode\n".format(000)) # 000 to be replaced by remaining time
            f.write("G1 X100 E12.5 F1000 ; intro line\n")

            f.write("G92 E0 ; set filament pos to 0\n")
            f.write("G21 ; set units to millimeters\n")
            f.write("G90 ; use absolute coordinates\n")
            f.write("M83 ; use relative distances for extrusion\n")

            f.write("G1 F{0} ; set print speed\n".format(print_speed))

            for path in self.paths_collection:
                for contour in path.contours:
                    for printpoint in contour.points:
                        f.write("G1 X{x} Y{y} Z{z} E{e}\n".format(x=printpoint.pt[0],
                                                                  y=printpoint.pt[1],
                                                                  z=printpoint.pt[2],
                                                                  e=filament_feed_length))

    def save_commands_to_json(self, path, name):
        logger.info("Saving to Json: ", len(self.commands), "commands, on file: ", path + name)
        # data dictionary
        data = {}
        for i, c in enumerate(self.commands):
            data[i] = c.get_fabrication_command_dict()
        # create Json file
        filename = os.path.join(path, name)
        with open(filename, 'w') as f:
            f.write(json.dumps(data, indent=3, sort_keys=True))


if __name__ == "__main__":
    pass
