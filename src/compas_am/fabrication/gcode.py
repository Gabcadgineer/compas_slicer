import logging

logger = logging.getLogger('logger')


def generate_gcode(paths, FILE, machine_model):
    """Creates all the commands in order for fabrication

    Attributes
    ----------
    paths: list
        compas_am.slicing.printpath.PathCollection or any class inheriting from it
    FILE : str
        Path of gcode file to be saved.
    machine_model : The class that stores the information for the 3d printer
        compas_am.fabrication.machine_model.MachineModel
    
    GCODE COMMANDS (for reference)

    G28                     - Home all axes
    G29                     - Bed Leveling (Automatic)
    G28 X Y                 - Home X and Y axes
    G90                     - Set Absolute Positioning (movement)
    M82                     - Set Absolute Extrusion mode (extrusion)
    G0                      - Travel move (non-extrusion)
    G1 X0 Y0 F2400          - Linear Movement, move to X = 0, Y = 0 with a speed of 2400 mm/min
    G1 X20 Y20 E10 F1200    - Linear Movement, move to X = 20, Y = 20 with a speed of 1200 mm/min while pushing 10mm of filament (E)
    G92 E0                  - Set current filament position to E=0. Can also be used for X, Y, Z axes
    M104 S190 T0            - Start heating T0 to 190 degrees celcius
    M109 S190 T0            - Wait until T0 is 190 degrees before continuing commands
    M116                    -
    M140 S50                - Heat the bed to 50 degrees celcius
    M190                    - Wait until the bed is 50 degrees before continuing
    M106 255                - Set Fan Speed (255 = fully on, 0 = off)
    M73 P25                 - Set current print progress for LCD screen to 25%
    
    """

    ## print parameters coming from machine model
    extruder_temp = machine_model.print_parameters["extruder_temperature"]
    bed_temp = machine_model.print_parameters["bed_temperature"]
    print_speed = machine_model.print_parameters["print_speed"]
    z_hop = machine_model.print_parameters["z_hop"]

    filament_feed_length = 0  ## Shouldn't this also be coming from machine_model print_parameters?

    # convert print_speed mm/s to mm/min
    print_speed = print_speed * 60
    layer_number = 1  # start count

    with open(FILE, "w") as f:
        f.write("; Generated by compas_am vX.X\n")
        f.write("; LAYER HEIGHT: \n")

        f.write("M201 X1000 Y1000 Z1000 E5000 ; sets max acceleration mm/sec^2\n")
        f.write("M203 X200 Y200 Z12 E120 ; sets max feedrates, mm/sec\n")

        f.write("M83; extruder relative mode\n")

        f.write("M104 S{0} ; set extruder temperature\n".format(extruder_temp))  # extruder_temperature
        f.write("M140 S{0} ; set bed temperature\n".format(bed_temp))  # bed_temperature
        f.write("M190 S{0} ; wait for bed temperature\n".format(bed_temp))  # bed_temperature

        f.write("G28 ; home all axes without mesh bed level\n")
        f.write("G80 ; mesh bed leveling\n")

        f.write("G1 Y-3.0 F1000.0 ; go outside print area\n")
        f.write("G92 E0 ; set filament pos to 0\n")
        f.write("G1 X60.0 E9.0 F1000 ; intro line\n")
        f.write("M73 P0 R{0} ; set progress to 0 and time remaining to total time\n".format(
            000))  # 000 to be replaced by remaining time
        f.write("M73 Q0 R{0} ; set progress to 0 and time remaining to total time for quiet mode\n".format(
            000))  # 000 to be replaced by remaining time
        f.write("G1 X100 E12.5 F1000 ; intro line\n")

        f.write("G92 E0 ; set filament pos to 0\n")
        f.write("G21 ; set units to millimeters\n")
        f.write("G90 ; use absolute coordinates\n")
        f.write("M83 ; use relative distances for extrusion\n")

        f.write("G1 F{0} ; set print speed\n".format(print_speed))

        for path in paths:
            logger.debug("Gcode layer number : %d" % layer_number)

            # get layer height from first printpoint in path
            layer_height = path.contours[0].points[0].layer_height  # only constant height per layer supported

            f.write(";LAYER:{0}\n".format(layer_number))
            f.write("G0 Z{0}\n".format(layer_height))
            for contour in path.contours:
                f.write(";CONTOUR\n")
                for printpoint in contour.points:
                    filament_feed_length = get_filament_feed_length(printpoint)  ## TODO!
                    f.write("G1 X{x} Y{y} Z{z} E{e}\n".format(x=printpoint.pt[0],
                                                              y=printpoint.pt[1],
                                                              z=printpoint.pt[2],
                                                              e=filament_feed_length))
            layer_number += 1
        logger.info("Saved to gcode: " + FILE)


def get_filament_feed_length(printpoint):
    prev_printpoint = printpoint.get_prev_print_point()
    next_printpoint = printpoint.get_next_print_point()
    if prev_printpoint:
        prev_pt = prev_printpoint.pt
    if next_printpoint:
        next_pt = next_printpoint.pt
    # TODO!!!
    return 0
